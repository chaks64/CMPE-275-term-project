{"version":3,"file":"index.js","sources":["../src/components/Post.js","../src/components/PostEditor.js","../src/index.js"],"sourcesContent":["import React from 'react'\n\nimport DOMPurify from 'dompurify'\nimport ReactHtmlParser from 'react-html-parser'\nimport Avatar from 'react-avatar'\n\nimport styles from './post.module.css'\n\nconst Post = ({ profileImage, name, content, date, time }) => {\n  const clean = DOMPurify.sanitize(content)\n\n  return (\n    <div className='panel panel-default p-3'>\n      <div className='panel-body'>\n        <div className='row'>\n          <div className='col-2 pr-0'>\n            <Avatar\n              className='float-right'\n              size={50}\n              name={name}\n              src={profileImage}\n            />\n          </div>\n          <div className='col-7'>\n            <p className={`mb-1 ${styles.name}`}>{name}</p>\n            <div className={styles.text}>{ReactHtmlParser(clean)}</div>\n          </div>\n          <div className='col-3'>\n            <p className={`mb-0 text-right ${styles.dateTime}`}>{date}</p>\n            <p className={`mb-0 text-right ${styles.dateTime}`}>{time}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\n\nimport ReactQuill from 'react-quill'\n\nimport './editor.css'\nimport 'react-quill/dist/quill.snow.css'\n\nconst PostEditor = ({ text, setText }) => {\n  const handleChange = (newValue) => {\n    setText(newValue)\n  }\n  return <ReactQuill value={text} onChange={handleChange} />\n}\n\nexport default PostEditor\n","import React, { useState, useEffect } from 'react'\n\nimport PropTypes from 'prop-types'\nimport ReactPaginate from 'react-paginate'\n\nimport Post from './components/Post'\nimport PostEditor from './components/PostEditor'\n\nimport styles from './index.module.css'\n\nconst DiscussionBoard = ({ onSubmit, posts }) => {\n  const [newPost, setNewPost] = useState(false)\n  const [text, setText] = useState('')\n\n  const perPage = 3\n  const [pageCount, setPageCount] = useState(0)\n  const [pagePosts, setPagePosts] = useState([])\n  const [currentPage, setCurrentPage] = useState(0)\n\n  useEffect(() => {\n    setPageCount(Math.ceil(posts.length / perPage))\n\n    if (posts.length % perPage !== 0 && posts.length > perPage) {\n      setPagePosts(\n        posts.slice(\n          posts.length - (posts.length % perPage) - 1,\n          posts.length - 1\n        )\n      )\n\n      setCurrentPage(pageCount - 1)\n    } else if (posts.length % perPage === 0 && posts.length > perPage) {\n      setPagePosts(posts.slice(posts.length - perPage, posts.length))\n      setCurrentPage(pageCount)\n    } else {\n      setPagePosts(posts.slice(0, perPage))\n      setCurrentPage(0)\n    }\n\n    return () => {\n      setPagePosts([])\n    }\n  }, [posts])\n\n  const clickNewPost = () => {\n    setNewPost(true)\n  }\n\n  const buildDate = (date) => {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ]\n    return (\n      months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear()\n    )\n  }\n\n  const addZero = (i) => {\n    if (i < 10) {\n      i = '0' + i\n    }\n    return i\n  }\n\n  const buildTime = (date) => {\n    let hours = date.getHours()\n    let mornOrNight = 'AM'\n\n    if (hours > 12 && hours < 24) {\n      hours -= 12\n      mornOrNight = 'PM'\n    }\n\n    return (\n      addZero(hours) +\n      ':' +\n      addZero(date.getMinutes()) +\n      ' ' +\n      mornOrNight +\n      ' ' +\n      date.toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2]\n    )\n  }\n\n  const submitPost = () => {\n    onSubmit(text)\n    setNewPost(false)\n    setText('')\n  }\n\n  const onPageChange = ({ selected }) => {\n    let offset = Math.ceil(selected * perPage)\n    setPagePosts(posts.slice(offset, offset + perPage))\n    setCurrentPage(selected)\n  }\n\n  const displayEditor = () => {\n    return (\n      <React.Fragment>\n        <div className='row'>\n          <div className='col'>\n            <PostEditor text={text} setText={setText} />\n          </div>\n        </div>\n        <div className='row pt-2'>\n          <div className='col'>\n            <button onClick={submitPost} className='btn btn-primary'>\n              Submit\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div className='container'>\n      <a\n        onClick={clickNewPost}\n        className={`pl-3 text-decoration-none ${styles.newPost}`}\n      >\n        Add New Post\n      </a>\n      {pagePosts.map((post, idx) => {\n        const newDate = buildDate(post.date)\n        const newTime = buildTime(post.date)\n\n        return (\n          <React.Fragment key={idx}>\n            <Post {...post} date={newDate} time={newTime} />\n            <hr className={`mt-0`} />\n          </React.Fragment>\n        )\n      })}\n\n      {newPost ? displayEditor() : ''}\n\n      <div className='d-flex justify-content-center mt-5'>\n        <ReactPaginate\n          pageCount={pageCount}\n          pageRangeDisplayed={5}\n          marginPagesDisplayed={5}\n          previousLabel='Previous'\n          nextLabel='Next'\n          breakLabel='...'\n          breakClassName='page-item'\n          onPageChange={onPageChange}\n          forcePage={currentPage}\n          containerClassName='pagination'\n          pageClassName='page-item'\n          pageLinkClassName='page-link'\n          previousClassName='page-item'\n          nextClassName='page-item'\n          previousLinkClassName='page-link'\n          nextLinkClassName='page-link'\n        />\n      </div>\n    </div>\n  )\n}\n\nDiscussionBoard.defaultProps = {\n  posts: []\n}\n\nDiscussionBoard.propTypes = {\n  posts: PropTypes.array,\n  onSubmit: PropTypes.func\n}\n\nexport default DiscussionBoard\n"],"names":["Post","profileImage","name","date","time","clean","DOMPurify","sanitize","content","React","className","Avatar","size","src","ReactHtmlParser","PostEditor","setText","ReactQuill","value","text","onChange","newValue","DiscussionBoard","onSubmit","posts","useState","newPost","setNewPost","pageCount","setPageCount","pagePosts","setPagePosts","currentPage","setCurrentPage","useEffect","Math","ceil","length","slice","addZero","i","onClick","map","post","idx","newDate","getMonth","getDate","getFullYear","newTime","hours","getHours","mornOrNight","getMinutes","toLocaleTimeString","timeZoneName","split","buildTime","Fragment","key","ReactPaginate","pageRangeDisplayed","marginPagesDisplayed","previousLabel","nextLabel","breakLabel","breakClassName","onPageChange","selected","offset","forcePage","containerClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","defaultProps","propTypes","PropTypes","array","func"],"mappings":"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"}